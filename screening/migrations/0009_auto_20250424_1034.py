# Generated by Django 4.2.7 on 2025-04-24 09:34

from django.db import migrations, models
from django.utils import timezone


class Migration(migrations.Migration):

    dependencies = [
        ('screening', '0008_userprofile_and_more'),
    ]

    operations = [
        # Custom SQL operations to make this migration idempotent 
        # and to handle any database schema differences safely
        
        # Add subscription_plan if missing
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'subscription_plan'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @add_column_sql = IF(@column_exists = 0,
                'ALTER TABLE screening_businessprofile ADD subscription_plan VARCHAR(50) DEFAULT "free" NOT NULL',
                'SELECT "Column subscription_plan already exists, skipping"'
            );
            
            PREPARE stmt FROM @add_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
        
        # Add subscription_start if missing
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'subscription_start'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @add_column_sql = IF(@column_exists = 0,
                'ALTER TABLE screening_businessprofile ADD subscription_start DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP',
                'SELECT "Column subscription_start already exists, skipping"'
            );
            
            PREPARE stmt FROM @add_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
        
        # Add subscription_end if missing
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'subscription_end'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @add_column_sql = IF(@column_exists = 0,
                'ALTER TABLE screening_businessprofile ADD subscription_end DATETIME NULL',
                'SELECT "Column subscription_end already exists, skipping"'
            );
            
            PREPARE stmt FROM @add_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
        
        # Add resumes_screened if missing
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'resumes_screened'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @add_column_sql = IF(@column_exists = 0,
                'ALTER TABLE screening_businessprofile ADD resumes_screened INT NOT NULL DEFAULT 0',
                'SELECT "Column resumes_screened already exists, skipping"'
            );
            
            PREPARE stmt FROM @add_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
        
        # Add resumes_limit if missing
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'resumes_limit'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @add_column_sql = IF(@column_exists = 0,
                'ALTER TABLE screening_businessprofile ADD resumes_limit INT NOT NULL DEFAULT 25',
                'SELECT "Column resumes_limit already exists, skipping"'
            );
            
            PREPARE stmt FROM @add_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
        
        # Drop batches_screened if it exists (cleanup)
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'batches_screened'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @drop_column_sql = IF(@column_exists > 0,
                'ALTER TABLE screening_businessprofile DROP COLUMN batches_screened',
                'SELECT "Column batches_screened does not exist, skipping"'
            );
            
            PREPARE stmt FROM @drop_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
        
        # Drop batches_limit if it exists (cleanup)
        migrations.RunSQL(
            """
            SET @column_exists = (
                SELECT COUNT(*)
                FROM INFORMATION_SCHEMA.COLUMNS
                WHERE TABLE_NAME = 'screening_businessprofile'
                AND COLUMN_NAME = 'batches_limit'
                AND TABLE_SCHEMA = DATABASE()
            );
            
            SET @drop_column_sql = IF(@column_exists > 0,
                'ALTER TABLE screening_businessprofile DROP COLUMN batches_limit',
                'SELECT "Column batches_limit does not exist, skipping"'
            );
            
            PREPARE stmt FROM @drop_column_sql;
            EXECUTE stmt;
            DEALLOCATE PREPARE stmt;
            """,
            reverse_sql="",
        ),
    ]
